; Listing generated by Microsoft (R) Optimizing Compiler Version 19.21.27702.2 

	TITLE	C:\Users\shayn\Desktop\i4k_OGL\src\mzk.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mzk_init@@YGXPAF@Z				; mzk_init
PUBLIC	__real@3f68ce2e
PUBLIC	__real@3fa5b713
PUBLIC	__real@3fe8ce2e
PUBLIC	__real@40860597
PUBLIC	__real@40e8ce2e
PUBLIC	__real@411b5f04
PUBLIC	__real@46fffe00
EXTRN	__fltused:DWORD
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@411b5f04
CONST	SEGMENT
__real@411b5f04 DD 0411b5f04r			; 9.7107
CONST	ENDS
;	COMDAT __real@40e8ce2e
CONST	SEGMENT
__real@40e8ce2e DD 040e8ce2er			; 7.27517
CONST	ENDS
;	COMDAT __real@40860597
CONST	SEGMENT
__real@40860597 DD 040860597r			; 4.18818
CONST	ENDS
;	COMDAT __real@3fe8ce2e
CONST	SEGMENT
__real@3fe8ce2e DD 03fe8ce2er			; 1.81879
CONST	ENDS
;	COMDAT __real@3fa5b713
CONST	SEGMENT
__real@3fa5b713 DD 03fa5b713r			; 1.29465
CONST	ENDS
;	COMDAT __real@3f68ce2e
CONST	SEGMENT
__real@3f68ce2e DD 03f68ce2er			; 0.909396
CONST	ENDS
; Function compile flags: /Ogspy
; File C:\Users\shayn\Desktop\i4k_OGL\src\system.h
;	COMDAT ?f2i@@YGHM@Z
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_x$ = 8							; size = 4
?f2i@@YGHM@Z PROC					; f2i, COMDAT

; 9    : {

	push	ecx

; 10   :     int tmp;
; 11   :     _asm fld dword ptr[x]

	fld	DWORD PTR _x$[esp]
	fistp	DWORD PTR _tmp$[esp+4]
	mov	eax, DWORD PTR _tmp$[esp+4]

; 12   :     _asm fistp dword ptr[tmp];
; 13   :     return tmp;
; 14   : }

	pop	ecx
	ret	4
?f2i@@YGHM@Z ENDP					; f2i
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\shayn\Desktop\i4k_OGL\src\mzk.cpp
;	COMDAT ?mzk_init@@YGXPAF@Z
_TEXT	SEGMENT
_tmp$1 = -16						; size = 4
tv403 = -12						; size = 4
_tmp$2 = -8						; size = 4
_x$ = -4						; size = 4
_i$3 = -4						; size = 4
$T4 = 8							; size = 4
_x$ = 8							; size = 4
_buffer$ = 8						; size = 4
?mzk_init@@YGXPAF@Z PROC				; mzk_init, COMDAT

; 11   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 12   : 	float fl;
; 13   : 	float fr;
; 14   :     for( int i=0; i<MZK_NUMSAMPLES; i++ ) 

	fld	DWORD PTR __real@40e8ce2e
	xor	ecx, ecx
	fld	DWORD PTR __real@411b5f04
	fld	DWORD PTR __real@3fe8ce2e
	fld	DWORD PTR __real@40860597
	fld	DWORD PTR __real@3f68ce2e
	fld	DWORD PTR __real@3fa5b713
	fld	DWORD PTR __real@46fffe00
	push	esi
	mov	esi, DWORD PTR _buffer$[ebp]
	push	edi
	mov	DWORD PTR _i$3[ebp], ecx
$LN4@mzk_init:

; 15   :     {
; 16   : 		if (i % 2 == 0) {

	fild	DWORD PTR _i$3[ebp]
	fst	DWORD PTR tv403[ebp]
	test	cl, 1
	jne	SHORT $LN32@mzk_init
	fstp	ST(5)
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)

; 17   : 			fl = sinf(6.2831f * 440.0f * (float)i / (float)MZK_RATE);
; 18   : 			fr = sinf(6.2831f * 587.3f * (float)i / (float)MZK_RATE);

	fxch	ST(2)
	fstp	DWORD PTR $T4[ebp]
	jmp	SHORT $LN8@mzk_init
$LN32@mzk_init:

; 19   : 		}
; 20   : 		else if (i % 3 == 0)

	mov	eax, ecx
	fstp	ST(7)
	push	3
	cdq
	fstp	ST(5)
	pop	edi
	idiv	edi
	test	edx, edx
	jne	SHORT $LN38@mzk_init
	fstp	ST(1)
	fstp	ST(0)

; 21   : 		{
; 22   : 			fl = sinf(6.2831f * 110.0f * (float)i / (float)MZK_RATE);
; 23   : 			fr = sinf(6.2831f * 253.3f * (float)i / (float)MZK_RATE);
; 24   : 		}
; 25   : 		else {

	jmp	SHORT $LN42@mzk_init
$LN38@mzk_init:

; 19   : 		}
; 20   : 		else if (i % 3 == 0)

	fstp	ST(3)
	fstp	ST(1)

; 26   : 			fl = sinf(6.2831f * 55.0f * (float)i / (float)MZK_RATE);
; 27   : 			fr = sinf(6.2831f * 78.3f * (float)i / (float)MZK_RATE);

	fxch	ST(1)
$LN42@mzk_init:

; 28   : 		}
; 29   :         buffer[2 * i + 0] = f2i(fl*32767.0f);

	fstp	DWORD PTR $T4[ebp]
	fxch	ST(2)
$LN8@mzk_init:
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fsin
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _x$[ebp]
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$2[ebp]
	fld	DWORD PTR $T4[ebp]
	fmul	DWORD PTR tv403[ebp]
	mov	ax, WORD PTR _tmp$2[ebp]
	mov	WORD PTR [esi+ecx*4], ax
	fsin

; 30   :         buffer[2 * i + 1] = f2i(fr*32767.0f);

	fmul	DWORD PTR __real@46fffe00
	fstp	DWORD PTR _x$[ebp]
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$1[ebp]

; 12   : 	float fl;
; 13   : 	float fr;
; 14   :     for( int i=0; i<MZK_NUMSAMPLES; i++ ) 

	fld	DWORD PTR __real@40e8ce2e
	fld	DWORD PTR __real@411b5f04
	fld	DWORD PTR __real@3fe8ce2e

; 30   :         buffer[2 * i + 1] = f2i(fr*32767.0f);

	mov	ax, WORD PTR _tmp$1[ebp]
	fld	DWORD PTR __real@40860597
	fld	DWORD PTR __real@3f68ce2e
	fld	DWORD PTR __real@3fa5b713
	fld	DWORD PTR __real@46fffe00
	mov	WORD PTR [esi+ecx*4+2], ax
	inc	ecx
	mov	DWORD PTR _i$3[ebp], ecx
	cmp	ecx, 39520				; 00009a60H
	jl	$LN4@mzk_init

; 12   : 	float fl;
; 13   : 	float fr;
; 14   :     for( int i=0; i<MZK_NUMSAMPLES; i++ ) 

	fstp	ST(6)
	fstp	ST(3)
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)

; 31   :     }
; 32   : }

	pop	edi
	fstp	ST(0)
	pop	esi
	leave
	ret	4
?mzk_init@@YGXPAF@Z ENDP				; mzk_init
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.17763.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 750  :             return (float)sin(_X);

	fld	DWORD PTR __X$[esp-4]
	fsin

; 751  :         }

	ret	0
_sinf	ENDP
_TEXT	ENDS
END
